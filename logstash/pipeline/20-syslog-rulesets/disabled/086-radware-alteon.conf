input {
  pipeline { address => "syslog-ruleset-radware-alteon" }
}

filter {
  mutate { add_tag => "ruleset-radware-alteon" }
  if "WebOS" in [Attachment][RawLog][Content][message] {
    grok {
      match => {
        "[Attachment][RawLog][Content][message]" => [
          
          "(?<rule_168000100>)Failed login attempt via %{NOTSPACE:[Attachment][RawLog][Content][network][protocol]} from host %{NOTSPACE:[Attachment][RawLog][Content][source][address]}",

          
          "(?<rule_168000101>)%{NOTSPACE:[Attachment][RawLog][Content][user][name]} login from host %{NOTSPACE:[Attachment][RawLog][Content][source][address]}",

          
          "(?<rule_168000200>)virtual router\s+%{NOTSPACE:[Attachment][RawLog][Content][destination][address]} is now MASTER",

          
          "(?<rule_168000201>)real service %{IP:[Attachment][RawLog][Content][source][address]}:%{POSINT:[Attachment][RawLog][Content][source][port]:int} operational",

          
          "(?<rule_168000202>)real server %{IP:[Attachment][RawLog][Content][destination][address]} operational",

          
          "(?<rule_168000203>)cannot contact real service %{IP:[Attachment][RawLog][Content][destination][address]}:%{POSINT:[Attachment][RawLog][Content][destination][port]:int}",

          
          "(?<rule_168000204>)cannot contact real server %{IP:[Attachment][RawLog][Content][destination][address]}"
        ]
      }

      keep_empty_captures => true
      break_on_match => true
      ecs_compatibility => "disabled"
      add_tag => [ "last"]
    }
  }
}

output {
  if "last" in [tags] {
    pipeline { send_to => "output-norm" }
  } else {
    pipeline { send_to => "syslog-pcre" }
  }
}
