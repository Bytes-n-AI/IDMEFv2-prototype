input {
  pipeline { address => "syslog-ruleset-vigor" }
}

filter {
  mutate { add_tag => "ruleset-vigor" }
  if "wan @Group:" in [Attachment][RawLog][Content][message] or "lan @Group:" in [Attachment][RawLog][Content][message] {
    grok {
      match => {
        "[Attachment][RawLog][Content][message]" => [
          
          "(?<rule_2000>)(?<interface>[wl]an) @Group:Rule=(?<acl>\d+:\d+) b %{IP:[Attachment][RawLog][Content][source][address]},%{WORD:size} -> %{IP:[Attachment][RawLog][Content][destination][address]},%{WORD:dstsize}    PR %{NOTSPACE:[Attachment][RawLog][Content][network][transport]} len %{INT:id1} %{INT:id2} %{NOTSPACE:data} %{INT:id3} %{INT:id4} %{INT:id5} (IN|OUT)",

          
          "(?<rule_2001>)([wl]an) @Group:Rule=(?<acl>\d+:\d+) b %{IP:[Attachment][RawLog][Content][source][address]} -> %{IP:[Attachment][RawLog][Content][destination][address]}\s+PR icmp len %{INT:id1} %{INT:id2} icmp %{INT:id1}/%{INT:id2} (IN|OUT)"
        ]
      }

      keep_empty_captures => true
      break_on_match => true
      ecs_compatibility => "disabled"
      add_tag => [ "last"]
    }
  }
}

output {
  if "last" in [tags] {
    pipeline { send_to => "output-norm" }
  } else {
    pipeline { send_to => "syslog-pcre" }
  }
}
