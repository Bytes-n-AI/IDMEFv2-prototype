input {
  pipeline { address => "syslog-ruleset-vmware" }
}

filter {
  mutate { add_tag => "ruleset-vmware" }
  if "ha-eventmgr" in [Attachment][RawLog][Content][message] {
    grok {
      match => {
        "[Attachment][RawLog][Content][message]" => [
          
          "(?<rule_175000100>)User %{USER:[Attachment][RawLog][Content][user][name]}@%{IPORHOST:[Attachment][RawLog][Content][source][address]} logged in",

          
          "(?<rule_175000101>)Cannot login %{USER:[Attachment][RawLog][Content][user][name]}@%{IPORHOST:[Attachment][RawLog][Content][source][address]}",

          
          "(?<rule_175000102>)User %{USER:[Attachment][RawLog][Content][user][name]}@%{IPORHOST:[Attachment][RawLog][Content][source][address]} logged out",

          
          "(?<rule_175000200>)Host is rebooting",

          
          "(?<rule_175000201>)%{NOTSPACE:process_name} on\s*%{NOTSPACE:nodename} in %{NOTSPACE:classification} is (suspended|resumed)",

          
          "(?<rule_175000202>)%{NOTSPACE:process_name} on\s*%{NOTSPACE:nodename} in %{NOTSPACE:classification} is powered (on|off)",

          
          "(?<rule_175000300>)Firewall configuration has changed. Operation \'\w+\' for rule set %{WORD:service} succeeded"
        ]
      }

      keep_empty_captures => true
      break_on_match => true
      ecs_compatibility => "disabled"
      add_tag => [ "last"]
    }
  }
}

output {
  if "last" in [tags] {
    pipeline { send_to => "output-norm" }
  } else {
    pipeline { send_to => "syslog-pcre" }
  }
}
