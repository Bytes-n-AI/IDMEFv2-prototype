input {
  pipeline { address => "syslog-ruleset-portsentry" }
}

filter {
  mutate { add_tag => "ruleset-portsentry" }
  if [Attachment][RawLog][Content][process][name] == "portsentry" {
    grok {
      match => {
        "[Attachment][RawLog][Content][message]" => [
          
          "(?<rule_1500>)attackalert:.*?%{NOTSPACE:proto} scan from\s+host: %{IPORHOST:[Attachment][RawLog][Content][source][address]}/%{IP:[Attachment][RawLog][Content][source][ip]} to (?=TCP|UDP)%{NOTSPACE:[Attachment][RawLog][Content][network][transport]} port: %{POSINT:[Attachment][RawLog][Content][destination][port]:int}",

          
          "(?<rule_1501>)attackalert: Connect from host: %{IPORHOST:[Attachment][RawLog][Content][source][address]}/%{IP:[Attachment][RawLog][Content][source][ip]} to (?=TCP|UDP)%{NOTSPACE:[Attachment][RawLog][Content][network][transport]} port: %{POSINT:[Attachment][RawLog][Content][destination][port]:int}",

          
          "(?<rule_1502>)attackalert: Host %{IP:[Attachment][RawLog][Content][source][address]} has been blocked via dropped route using command: \"([^\"]+)\"",

          
          "(?<rule_1503>)attackalert: Host: %{IPORHOST:[Attachment][RawLog][Content][source][address]}/%{IP:[Attachment][RawLog][Content][source][ip]} is\s+already blocked"
        ]
      }

      keep_empty_captures => true
      break_on_match => true
      ecs_compatibility => "disabled"
      add_tag => [ "last"]
    }
  }
}

output {
  if "last" in [tags] {
    pipeline { send_to => "output-norm" }
  } else {
    pipeline { send_to => "syslog-pcre" }
  }
}
