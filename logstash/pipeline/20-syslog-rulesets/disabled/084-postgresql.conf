input {
  pipeline { address => "syslog-ruleset-postgresql" }
}

filter {
  mutate { add_tag => "ruleset-postgresql" }
  if [Attachment][RawLog][Content][message] =~ "(LOG|FATAL): {2}" {
    grok {
      match => {
        "[Attachment][RawLog][Content][event][original]" => [
          
          
          "(?<rule_23701>)\[%{DATA}\] (?:%{IP:[Attachment][RawLog][Content][source][address]}: )?FATAL:\s*%{NOTSPACE} authentication failed for user \"%{USERNAME:[Attachment][RawLog][Content][user][target][name]}\"",

          
          "(?<rule_23702>)\[%{DATA}\] (.*) LOG:\s*connection received: host=%{IP:[Attachment][RawLog][Content][source][address]} port=%{POSINT:[Attachment][RawLog][Content][source][port]:int}",

          
          "(?<rule_23703>)\[%{DATA}\] %{IP:[Attachment][RawLog][Content][source][address]}:\S+ LOG:\s*connection authorized: user=%{USERNAME:[Attachment][RawLog][Content][user][target][name]} database=%{NOTSPACE:db_name}"
        ]
      }

      keep_empty_captures => true
      break_on_match => true
      ecs_compatibility => "disabled"
      add_tag => [ "last"]
    }
  }
}

output {
  if "last" in [tags] {
    pipeline { send_to => "output-norm" }
  } else {
    pipeline { send_to => "syslog-pcre" }
  }
}
