input {
  pipeline { address => "syslog-ruleset-juniper-srx" }
}

filter {
  mutate { add_tag => "ruleset-juniper-srx" }
  if "RT_" in [Attachment][RawLog][Content][message] or "KERN_" in [Attachment][RawLog][Content][message] or "KMD_" in [Attachment][RawLog][Content][message] or "UI_" in [Attachment][RawLog][Content][message] {
    grok {
      match => {
        "[Attachment][RawLog][Content][message]" => [
          
          "(?<rule_22001>)\[%{USER:[Attachment][RawLog][Content][user][name]}@%{NOTSPACE:domain} source-address=\"%{IP:[Attachment][RawLog][Content][source][address]}\" source-port=\"%{POSINT:[Attachment][RawLog][Content][source][port]:int}\" destination-address=\"%{IP:[Attachment][RawLog][Content][destination][address]}\" destination-port=\"%{POSINT:[Attachment][RawLog][Content][destination][port]}\" service-name=\"%{DATA}\" protocol-id=\"%{WORD:[Attachment][RawLog][Content][network][iana_number]:int}\"",

          
          "(?<rule_22002>)KERN_ARP_ADDR_CHANGE: arp info overwritten for %{IP:[Attachment][RawLog][Content][destination][address]} from %{MAC:src} to %{MAC:dst}",

          
          "(?<rule_22003>)Policy lookup for %{NOTSPACE:impact} \[%{NOTSPACE:target}\] failed for p1_local=%{NOTSPACE:local}\((.*=%{IP:[Attachment][RawLog][Content][destination][address]})\) p1_remote=%{NOTSPACE:remote}\((.*=%{IP:[Attachment][RawLog][Content][source][address]})\) p2_local=%{NOTSPACE:local2}\((?<data_local1>.*)\) p2_remote=%{NOTSPACE:remote2}\((?<data_remote2>.*)\)",

          
          "(?<rule_22004>)RT_SCREEN_TCP \[%{USER:[Attachment][RawLog][Content][user][name]}@%{NOTSPACE} attack-name=\"(.*)\" source-address=\"%{IP:[Attachment][RawLog][Content][source][address]}\" source-port=\"%{POSINT:[Attachment][RawLog][Content][source][port]:int}\" destination-address=\"%{IP:[Attachment][RawLog][Content][destination][address]}\" destination-port=\"%{POSINT:[Attachment][RawLog][Content][destination][port]}\" \S+ interface-name=\"%{DATA}\"",

          
          "(?<rule_22005>)UI_AUTH_EVENT: Authenticated user \'%{USER:[Attachment][RawLog][Content][user][target][name]}\' at permission level \'%{DATA}\'",

          
          "(?<rule_22006>)UI_LOGIN_EVENT: User \'%{USER:user}\' login, class \'%{DATA}\' \[%{NOTSPACE:id}\], %{NOTSPACE:type} \'%{NOTSPACE:[Attachment][RawLog][Content][source][address]} %{POSINT:[Attachment][RawLog][Content][source][port]:int} %{NOTSPACE:[Attachment][RawLog][Content][destination][address]} %{POSINT:[Attachment][RawLog][Content][destination][port]}\'",

          
          "(?<rule_22007>)UI_CMDLINE_READ_LINE: User \'%{USER:[Attachment][RawLog][Content][user][name]}\', command \'%{DATA}\'",

          
          "(?<rule_22008>)\[%{USER:[Attachment][RawLog][Content][user][target][name]}@%{NOTSPACE:domain} interface-name=\"(.*)\" source-address=\"%{IP:[Attachment][RawLog][Content][source][address]}\" destination-address=\"%{IP:[Attachment][RawLog][Content][destination][address]}\""
        ]
      }

      keep_empty_captures => true
      break_on_match => true
      ecs_compatibility => "disabled"
      add_tag => [ "last"]
    }
  }
}

output {
  if "last" in [tags] {
    pipeline { send_to => "output-norm" }
  } else {
    pipeline { send_to => "syslog-pcre" }
  }
}
