input {
  pipeline { address => "syslog-ruleset-arbor" }
}

filter {
  mutate { add_tag => "ruleset-arbor" }
  if "anomaly" in [Attachment][RawLog][Content][message] or "since" in [Attachment][RawLog][Content][message] or "firstSeen" in [Attachment][RawLog][Content][message] {
    grok {
      match => {
        "[Attachment][RawLog][Content][message]" => [
          
          "(?<rule_4300>)anomaly ([a-zA-Z_-]+) id %{INT:id} status %{NOTSPACE:status} severity %{INT:severity} src %{IP:[Attachment][RawLog][Content][source][address]}/%{INT} \w+ dst %{IP:[Attachment][RawLog][Content][destination][address]}/%{INT} \w+ start (?<date>[\d\- :\+]+) duration %{INT:duration} percent %{NUMBER:percent} rate (?<rate>[\de\+\-]+) rateUnit %{WORD:rateunit} protocol %{WORD:proto} flags %{WORD:flag} url %{NOTSPACE:url}",

          
          "(?<rule_4301>)anomaly ([a-zA-Z_-]+) id %{INT:id} status %{NOTSPACE:status} severity %{INT:severity} router (?<address>[\d\.\/]+) interface %{NOTSPACE:interface} %{NOTSPACE:data}",

          
          "(?<rule_4302>)collector %{NOTSPACE:collector} %{NOTSPACE:status} since %{DATA:since} duration %{INT:duration}",

          
          "(?<rule_4303>)internalError location %{NOTSPACE:location} reason %{GREEDYDATA:reason} since %{DATA:since} duration %{INT:duration}",

          
          "(?<rule_4304>)rtr %{IP:ip} rtrSampleRate %{INT:rate} proto %{INT:proto} src %{IP:[Attachment][RawLog][Content][source][address]} dst %{IP:[Attachment][RawLog][Content][destination][address]} dstPort %{POSINT:[Attachment][RawLog][Content][destination][port]:int} firstSeen (?<date1>[\d\- :\+]+) lastSeen (?<datelast>[\d\- :\+]+) bytes \d+ pkts \d+ flows \d+"
        ]
      }

      keep_empty_captures => true
      break_on_match => true
      ecs_compatibility => "disabled"
      add_tag => [ "last"]
    }
  }
}

output {
  if "last" in [tags] {
    pipeline { send_to => "output-norm" }
  } else {
    pipeline { send_to => "syslog-pcre" }
  }
}
