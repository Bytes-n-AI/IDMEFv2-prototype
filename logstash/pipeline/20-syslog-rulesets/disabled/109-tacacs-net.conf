input {
  pipeline { address => "syslog-ruleset-tacacs-net" }
}

filter {
  mutate { add_tag => "ruleset-tacacs-net" }
  if [Attachment][RawLog][Content][process][name] in [ "tacacs_system", "tacacs_accounting", "tacacs_debug" ] {
    grok {
      match => {
        "[Attachment][RawLog][Content][message]" => [
          
          "(?<rule_120001>)\[%{IP:src}:%{INT:srcPort}\] No authorization entry found for %{IP:[Attachment][RawLog][Content][source][address]} %{NOTSPACE:[Attachment][RawLog][Content][user][target][name]}",

          
          "(?<rule_120002>)\[%{IP:[Attachment][RawLog][Content][source][address]}:%{POSINT:[Attachment][RawLog][Content][source][port]:int}\] AD:The credentials are incorrect\-%{NOTSPACE:[Attachment][RawLog][Content][user][target][name]}: %{NOTSPACE:Ident} LdapErr: %{NOTSPACE:status}, comment: AcceptSecurityContext error",

          
          "(?<rule_120003>)\[%{IP:src}:%{INT:srcPort}\] %{NOTSPACE:srcAddr} %{NOTSPACE:dstAddr} NAS_IP=%{NOTSPACE:[Attachment][RawLog][Content][source][address]} Port=%{NOTSPACE:port} rem_addr=%{IP:[Attachment][RawLog][Content][destination][address]} User=%{NOTSPACE:[Attachment][RawLog][Content][user][target][name]} Flags=Start start_time=%{NOTSPACE:time} service=%{NOTSPACE:service}",

          
          "(?<rule_120004>)\[%{IP:src}:%{INT:srcPort}\] %{NOTSPACE:srcAddr} %{NOTSPACE:dstAddr} NAS_IP=%{IP:[Attachment][RawLog][Content][source][address]} Port=%{NOTSPACE:port} rem_addr=%{IP:ipAddr} User=%{NOTSPACE:[Attachment][RawLog][Content][user][target][name]} Flags=Stop service=%{NOTSPACE:service} cmd=(?<command>.+)",

          
          "(?<rule_120005>)User=The command '(?<data>.+)' is not authorized for user %{NOTSPACE:user} and client %{IP:[Attachment][RawLog][Content][source][address]}",

          
          "(?<rule_120006>)\[%{IP:[Attachment][RawLog][Content][source][address]}:%{POSINT:[Attachment][RawLog][Content][source][port]:int}\] Local file Authentication result: user\-%{NOTSPACE:[Attachment][RawLog][Content][user][target][name]} specified in  group DEFAULT=InvalidUserOrPassword",

          
          "(?<rule_120007>)\[%{IP:src}:%{INT:srcPort}\] %{NOTSPACE:srcAddr} %{NOTSPACE:dstAddr} NAS_IP=%{IP:[Attachment][RawLog][Content][source][address]} Port=%{NOTSPACE:port} rem_addr=%{IP:[Attachment][RawLog][Content][destination][address]} User=%{NOTSPACE:[Attachment][RawLog][Content][user][target][name]} Flags=%{NOTSPACE:flag} protocol=%{NOTSPACE:[Attachment][RawLog][Content][network][transport]} start_time=%{NOTSPACE:time}",

          
          "(?<rule_120008>)\[%{IP:[Attachment][RawLog][Content][source][address]}:%{POSINT:[Attachment][RawLog][Content][source][port]:int}\] Command (?<data>.+) passed  expression .+, Allow=True",

          
          "(?<rule_120009>)\[%{IP:src}:%{INT:srcPort}\] %{NOTSPACE:srcAddr} %{NOTSPACE:dstAddr} NAS_IP=%{IP:[Attachment][RawLog][Content][source][address]} Port=%{NOTSPACE:port} rem_addr=%{IP:[Attachment][RawLog][Content][destination][address]} User=%{NOTSPACE:[Attachment][RawLog][Content][user][target][name]} Flags=%{NOTSPACE:flag} task_id=%{NOTSPACE:task_id} timezone=%{NOTSPACE:time} service=%{NOTSPACE:[Attachment][RawLog][Content][network][protocol]}"
        ]
      }

      keep_empty_captures => true
      break_on_match => true
      ecs_compatibility => "disabled"
      add_tag => [ "last"]
    }
  }
}

output {
  if "last" in [tags] {
    pipeline { send_to => "output-norm" }
  } else {
    pipeline { send_to => "syslog-pcre" }
  }
}
