input {
  kafka {
    bootstrap_servers => "${BOOTSTRAP_SERVER}"
    client_id         => "enrich"
    group_id          => "enrich"
    topics            => ["${TOPIC_NORMALIZED}"]
    codec             => json
    decorate_events   => "basic"

    # Workaround for https://github.com/elastic/logstash/issues/5115
    add_field         => {
      "[@metadata][enrich][iana]"   => "${ENRICH_IANA:yes}"
      "[@metadata][enrich][dns]"    => "${ENRICH_DNS:yes}"
      "[@metadata][enrich][geoip]"  => "${ENRICH_GEOIP:yes}"
      "[@metadata][enrich][geoloc]" => "${ENRICH_GEOLOC:yes}"
      "[@metadata][enrich][cti]"    => "${ENRICH_CTI:yes}"
    }
  }
}

filter {
  ruby {
    path => "/usr/share/logstash/config/scripts/analyzer.rb"
  }

  grok {
    match             => {
      "[Attachment][RawLog][Content][client][address]"      =>
        "^(?:%{IP:[Attachment][RawLog][Content][client][ip]}|%{HOSTNAME:[Attachment][RawLog][Content][client][hostname]})$"

      "[Attachment][RawLog][Content][destination][address]" =>
        "^(?:%{IP:[Attachment][RawLog][Content][destination][ip]}|%{HOSTNAME:[Attachment][RawLog][Content][destination][hostname]})$"

      "[Attachment][RawLog][Content][host][address]"        =>
        "^(?:%{IP:[Attachment][RawLog][Content][host][ip]}|%{HOSTNAME:[Attachment][RawLog][Content][host][hostname]})$"

      "[Attachment][RawLog][Content][observer][address]"    =>
        "^(?:%{IP:[Attachment][RawLog][Content][observer][ip]}|%{HOSTNAME:[Attachment][RawLog][Content][observer][hostname]})$"

      "[Attachment][RawLog][Content][server][address]"      =>
        "^(?:%{IP:[Attachment][RawLog][Content][server][ip]}|%{HOSTNAME:[Attachment][RawLog][Content][server][hostname]})$"

      "[Attachment][RawLog][Content][source][address]"      =>
        "^(?:%{IP:[Attachment][RawLog][Content][source][ip]}|%{HOSTNAME:[Attachment][RawLog][Content][source][hostname]})$"
    }
    break_on_match    => false
    ecs_compatibility => "disabled"
  }

  if [@metadata][enrich][iana] != "no" {
    ruby {
      path          => "/usr/share/logstash/config/scripts/iana.rb"
      script_params => {
        'protocols' => '/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_protocol_numbers.yml'
        'services'  => {
          'tcp'  => '/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_tcp.yml'
          'udp'  => '/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_udp.yml'
          'sctp' => '/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_sctp.yml'
          'dccp' => '/usr/share/logstash/modules/netflow/configuration/logstash/dictionaries/iana_service_names_dccp.yml'
        }
      }
    }
  }

  if [@metadata][enrich][dns] != "no" {
    ruby {
      path => "/usr/share/logstash/config/scripts/dns.rb"
    }
  }

  if [@metadata][enrich][geoip] != "no" {
    ruby {
      path          => "/usr/share/logstash/config/scripts/geoip.rb"
      script_params => {
        'geoip_database'    => "/var/lib/logstash/ti/GeoLite2-City.mmdb"
        'unlocode_database' => "/var/lib/logstash/ti/unlocode.json"
        'refresh_interval'  => 3600
        'cache_size'        => 1000
        'cache_ttl'         => 60
      }
    }
  }

  if [@metadata][enrich][geoloc] != "no" {
    ruby {
      path          => "/usr/share/logstash/config/scripts/geoloc.rb"
      script_params => {
        'database'          => "/var/lib/logstash/normalization/worldcities.csv"
        'refresh_interval'  => 3600
        'cache_size'        => 1000
        'cache_ttl'         => 3600
      }
    }
  }

  if [@metadata][enrich][cti] != "no" {
    ruby {
      path          => "/usr/share/logstash/config/scripts/cti.rb"
      script_params => {
        'databases'         => {
          'IP'    => "/var/lib/logstash/ti/ip.json"
          'Email' => "/var/lib/logstash/ti/mail.json"
        }
        'refresh_interval'  => 3600
        'cache_size'        => 1000
        'cache_ttl'         => 60
      }
    }
  }

  prune {
    whitelist_names => [
      # Top-level IDMEF attributes
      'Version',
      'ID',
      'Entity',
      'Category',
      'Cause',
      'Description',
      'Status',
      'Severity',
      'Confidence',
      'Note',
      'CreateTime',
      'StartTime',
      'CeaseTime',
      'DeleteTime',
      'AltNames',
      'AltCategory',
      'Ref',
      'CorrelID',
      'AggrCondition',
      'PredID',
      'RelID',

      # IDMEF classes
      'Analyzer',
      'Sensor',
      'Source',
      'Target',
      'Vector',
      'Attachment',
      'Observable'
    ]
  }
}

output {
  kafka {
    bootstrap_servers => "${BOOTSTRAP_SERVER}"
    client_id         => "output-enrich"
    topic_id          => "${TOPIC_ENRICHED}"
    codec             => json
    partitioner       => "uniform_sticky"
    message_key       => "%{[@metadata][kafka][key]}"
  }
}
