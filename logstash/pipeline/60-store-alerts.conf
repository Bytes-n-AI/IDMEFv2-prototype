input {
  kafka {
    bootstrap_servers => "${BOOTSTRAP_SERVER}"
    client_id         => "store-alert"
    group_id          => "store-alert"
    topics            => ["${TOPIC_DETECTED}"]
    codec             => json
  }
}

filter {
  mutate {
    copy => {
      "[tags]" => "[@metadata][tags]"
    }
  }

  if ![Severity] {
    mutate {
      add_field => {
        'Severity' => 'Unknown'
      }
    }
  }

  # Convert Attachment/Observable objects back to lists
  # and encode their content into a JSON string. 
  ruby {
    init => "require 'logstash/json'"
    code => "
    ['Attachment', 'Observable'].each do |field|
      entries = []
      (event.get(field) || {}).each do |k, v|
        v['Name'] = k
        unless v['Content'].is_a? String or v['Content'].nil?
          v['Content'] = LogStash::Json.dump(v['Content'])
          v['Size'] = v['Content'].bytesize if field == 'Attachment'
        end
        entries.append(v)
      end
      event.set(field, entries)
    end
    "
  }

  prune {
    whitelist_names => [
      # Top-level IDMEF attributes
      'Version',
      'ID',
      'Entity',
      'Category',
      'Cause',
      'Description',
      'Status',
      'Severity',
      'Confidence',
      'Note',
      'CreateTime',
      'StartTime',
      'CeaseTime',
      'DeleteTime',
      'AltNames',
      'AltCategory',
      'Ref',
      'CorrelID',
      'AggrCondition',
      'PredID',
      'RelID',

      # IDMEF classes
      'Analyzer',
      'Sensor',
      'Source',
      'Target',
      'Vector',
      'Attachment',
      'Observable'
    ]
  }

}

output {
  elasticsearch {
    hosts              => ["${BIG_DATA_SERVER}"]
    user               => "${BIG_DATA_USERNAME}"
    password           => "${BIG_DATA_PASSWORD}"
    ecs_compatibility  => "disabled"
    ilm_enabled        => true
    ilm_rollover_alias => "${INDEX_ALERTS}"
    template_overwrite => true
    template           => "/usr/share/logstash/config/IDMEFv2.mapping"
    index              => "${INDEX_ALERTS}-%{+yyyy.MM.dd}"
  }
}
