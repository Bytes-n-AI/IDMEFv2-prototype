input {
  pipeline { address => "output-norm" }
}

filter {
  ruby {
    code => "
      # Convert hashes back to lists
      [ '[Ref]', '[Sensor]' ].each do |k|
        v = event.get(k)
        if v.is_a?(Hash) then
          event.set(k, v.values)
        end
      end
    "
  }

  prune {
    whitelist_names => [
      # Top-level IDMEF attributes
      'Version',
      'ID',
      'Entity',
      'Category',
      'Cause',
      'Description',
      'Status',
      'Severity',
      'Confidence',
      'Note',
      'CreateTime',
      'StartTime',
      'CeaseTime',
      'DeleteTime',
      'AltNames',
      'AltCategory',
      'Ref',
      'CorrelID',
      'AggrCondition',
      'PredID',
      'RelID',

      # IDMEF classes
      'Analyzer',
      'Sensor',
      'Source',
      'Target',
      'Vector',
      'Attachment',
      'Observable'
    ]
  }
}

output {
  kafka {
    bootstrap_servers => "${BOOTSTRAP_SERVER}"
    client_id         => "output-norm"
    topic_id          => "${TOPIC_NORMALIZED}"
    codec             => json
    partitioner       => "uniform_sticky"
    message_key       => "%{[@metadata][source]}"
  }
}
