input {
  udp {
    port                 => 2055
    receive_buffer_bytes => 16777216
    workers              => 4
    add_field            => {
      "[@metadata][source]" => "netflow"
    }
    ecs_compatibility    => disabled
    codec                => netflow {
      # The codec does not use the new Event API and thus does not
      # support the Field Reference syntax.
      #target => "[Attachment][RawLog][Content]"
    }
  }
}

filter {
  # Copy the fields to their proper position.
  ruby {
    code => "
      nf = event.get('netflow')

      # For more information, see the contents of the yaml files at
      # https://github.com/logstash-plugins/logstash-codec-netflow/tree/master/lib/logstash/codecs/netflow
      # For our purposes, we ignore the network masks entirely.
      # See also https://www.ibm.com/docs/en/npi/1.1.0?topic=overview-ipfix-message-format
      cti_ip = {}
      [
        'ipv4_src_addr', 'ipv4_dst_addr', 'ipv6_src_addr', 'ipv6_dst_addr',
        'sourceIPv4Address', 'destinationIPv4Address', 'sourceIPv6Address', 'destinationIPv6Address'
      ].each do |f|
        if nf.key?(f)
          cti_ip[nf[f]] = []
        end
      end

      unless cti_ip.empty?
        event.set('[Attachment][CTI]', {
          'ContentType' => 'application/json',
          'Content    ' => {'IP' => cti_ip}
        })
      end

      {
        # Netflow 5/9
        'in_bytes'           => '[source][bytes]',
        'in_pkts'            => '[source][packets]',
        'l4_src_port'        => '[source][port]',
        'ipv6_src_addr'      => '[source][ip]',
        'ipv4_src_addr'      => '[source][ip]',
        'in_src_mac'         => '[source][mac]',
        'src_as'             => '[source][as][number]',
        'out_bytes'          => '[destination][bytes]',
        'out_pkts'           => '[destination][packets]',
        'l4_dst_port'        => '[destination][port]',
        'ipv6_dst_addr'      => '[destination][ip]',
        'ipv4_dst_addr'      => '[destination][ip]',
        'out_dst_mac'        => '[destination][mac]',
        'dst_as'             => '[destination][as][number]',
        'protocol'           => '[network][iana_number]',
        'in_permanent_bytes' => '[network][bytes]',
        'in_permanent_pkts'  => '[network][packets]',
        'first_switched'     => '[event][start]',
        'application_name'   => '[network][application]',

        # IPFix
        'sourceTransportPort'      => '[source][port]',
        'sourceIPv6Address'        => '[source][ip]',
        'sourceIPv4Address'        => '[source][ip]',
        'sourceMacAddress'         => '[source][mac]',
        'bgpSourceAsNumber'        => '[source][as][number]',
        'destinationTransportPort' => '[destination][port]',
        'destinationIPv4Address'   => '[destination][ip]',
        'destinationIPv6Address'   => '[destination][ip]',
        'destinationMacAddress'    => '[destination][mac]',
        'bgpDestinationAsNumber'   => '[destination][as][number]',
        'protocolIdentifier'       => '[network][iana_number]',
        'octetTotalCount'          => '[network][bytes]',
        'packetTotalCount'         => '[network][packets]',
        'flowStartSeconds'         => '[event][start]',
        # The following is technically incorrect but should still
        # work just fine in most cases...
        'applicationName'          => '[network][application]',
        'reverseApplicationName'   => '[network][application]',
      }.each do |s, d|
        v = nf[s]
        unless v.nil?
          event.set('[Attachment][RawLog][Content]'+d, v)
        end
      end

      event.set('[Attachment][RawLog][Content][event][created]', LogStash::Timestamp.new())
    "
    add_field => {
      '[Attachment][RawLog][ContentType]'             => 'application/json'
      '[Attachment][RawLog][Content][host][address]'  => '%{[host]}'
      '[Attachment][RawLog][Content][@timestamp]'     => '%{@timestamp}'
    }
  }


  if ![Attachment][RawLog][Content][network][iana_number] {
    drop { }
  }

  prune {
    whitelist_names => [
      # Top-level IDMEF attributes
      'Version',
      'ID',
      'Entity',
      'Category',
      'Cause',
      'Description',
      'Status',
      'Severity',
      'Confidence',
      'Note',
      'CreateTime',
      'StartTime',
      'CeaseTime',
      'DeleteTime',
      'AltNames',
      'AltCategory',
      'Ref',
      'CorrelID',
      'AggrCondition',
      'PredID',
      'RelID',

      # IDMEF classes
      'Analyzer',
      'Sensor',
      'Source',
      'Target',
      'Vector',
      'Attachment',
      'Observable',

      # Tags for internal use
      'tags'
    ]
  }
}

output {
  #pipeline { send_to => ["syslog-pcre"] }
  #stdout {}
  pipeline { send_to => ["output-norm"] }
}
