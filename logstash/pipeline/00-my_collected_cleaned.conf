input {
  kafka {
    bootstrap_servers => "${BOOTSTRAP_SERVER}"
    client_id         => "collected_cleaned"
    group_id         => "collected_cleaned"
    topics            => ["${TOPIC_COLLECTED}"]
    codec             => json
  }
}

filter {

  # Parse STRUCTURED-DATA field from RFC 5424 compliant logs.
  # This also removes any Byte-Order-Mark that may be present.
  # Finally, this removes the [SD] field from the event.
  ruby {
    path          => "/usr/share/logstash/config/scripts/rfc5424.rb"
    script_params => {
      'source'            => '[SD]'
    }
  }

  # Clean up @timestamp
  date {
    # Even though Joda-time / Java 8 are limited to milliseconds precision
    # additional decimals may still be matched by using the 'S' pattern.
    match     => [
      '[@metadata][timestamp]',
      'MMM dd yyyy HH:mm:ss.SSSSSS',
      'MMM dd yyyy HH:mm:ss.SSS',
      'MMM dd yyyy HH:mm:ss',
      'MMM  d yyyy HH:mm:ss.SSSSSS',
      'MMM  d yyyy HH:mm:ss.SSS',
      'MMM  d yyyy HH:mm:ss',
      'yyyy MMM dd HH:mm:ss.SSSSSS',
      'yyyy MMM dd HH:mm:ss.SSS',
      'yyyy MMM dd HH:mm:ss',
      'yyyy MMM  d HH:mm:ss.SSSSSS',
      'yyyy MMM  d HH:mm:ss.SSS',
      'yyyy MMM  d HH:mm:ss',
      'MMM dd HH:mm:ss.SSSSSS',
      'MMM dd HH:mm:ss.SSS',
      'MMM dd HH:mm:ss',
      'MMM  d HH:mm:ss.SSSSSS',
      'MMM  d HH:mm:ss.SSS',
      'MMM  d HH:mm:ss',
      'ISO8601'
    ]
  }

  if ![Attachment][RawLog][Content][process][name] {
    mutate {
      add_field => { 
        '[Attachment][RawLog][Content][process][name]' => '-'
      }
    }
  }

  #Add Raw log into [Attachment][RawLog]
  mutate {
    add_field => {
      '[Attachment][RawLog][ContentType]'              => 'application/json'
      '[Attachment][RawLog][Content][event][created]'  => '%{[Attachment][RawLog][Content][@timestamp]}'
      '[Attachment][RawLog][Content][event][provider]' => '%{[Attachment][RawLog][Content][process][name]}'
    }
  }


  #Set priority
  ruby {
    code => "
      # See RFC 3164 for the reason the default priority value is 13
      priority = (event.get('[Attachment][RawLog][Content][log][syslog][priority]') || 13)
      event.set('[Attachment][RawLog][Content][log][syslog][facility][code]', (priority / 8))
      event.set('[Attachment][RawLog][Content][log][syslog][severity][code]', (priority % 8))
    "
  }

 #Set process name
  translate {
    source           => '[Attachment][RawLog][Content][process][name]'
    target           => '[Attachment][RawLog][Content][service][type]'
    fallback         => '%{[Attachment][RawLog][Content][process][name]}'
    dictionary => {
      'apache' => 'httpd'
    }
  }

  # Set severity field
  translate {
    source      => '[Attachment][RawLog][Content][log][syslog][severity][code]'
    target      => '[Attachment][RawLog][Content][log][syslog][severity][name]'
    dictionary  => {
      '0' => 'Emergency'
      '1' => 'Alert'
      '2' => 'Critical'
      '3' => 'Error'
      '4' => 'Warning'
      '5' => 'Notice'
      '6' => 'Informational'
      '7' => 'Debug'
    }
  }

  # Set Facility field
  translate {
    source      => '[Attachment][RawLog][Content][log][syslog][facility][code]'
    target      => '[Attachment][RawLog][Content][log][syslog][facility][name]'
    fallback    => 'Unknown'
    dictionary  => {
       '0' => 'kernel'
       '1' => 'user-level'
       '2' => 'mail'
       '3' => 'system'
       '4' => 'security/authorization'
       '5' => 'syslogd'
       '6' => 'line printer'
       '7' => 'network news'
       '8' => 'UUCP'
       '9' => 'clock'
      '10' => 'security/authorization'
      '11' => 'FTP'
      '12' => 'NTP'
      '13' => 'log audit'
      '14' => 'log alert'
      '15' => 'clock'
      '16' => 'local0'
      '17' => 'local1'
      '18' => 'local2'
      '19' => 'local3'
      '20' => 'local4'
      '21' => 'local5'
      '22' => 'local6'
      '23' => 'local7'
    }
  }

  prune {
    whitelist_names => [
      'Attachment'
    ]
  }
}

output {
  kafka {
    bootstrap_servers => "${BOOTSTRAP_SERVER}"
    topic_id => "${TOPIC_COLLECTED}_cleaned"
    codec => json
  }
}
