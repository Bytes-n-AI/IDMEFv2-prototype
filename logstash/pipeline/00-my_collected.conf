input {
  tcp {
    port => "${LISTEN_SYSLOG}"
    dns_reverse_lookup_enabled => false
    add_field                  => {
      "[@metadata][source]" => "syslog-tcp"
    }
  }
  udp {
    port => "${LISTEN_SYSLOG}"
    receive_buffer_bytes => 16777216
    workers => 4
    add_field            => {
      "[@metadata][source]" => "syslog-udp"
    }
    source_ip_fieldname  => "[@metadata][input][tcp][source][ip]"
  }
}

filter {
  grok {
    match               => {
      'message' => [
        # Cisco-related formats
        #   <pri>year timestamp.msec tz: ip hostname seqno: %event_code: message
        #   <pri>seqno: uptime: %event_code: message
        #
        # where pri, year, timestamp, msec, tz, ip, hostname, seqno & uptime may be omitted (depending on device configuration)
        #   logging facility
        #   logging hostname
        #   service timestamps log datetime msec show-timezone year
        #   service timestamps log uptime
        #
        # Listed before other patterns to avoid conflicts.
        # Even though the pattern accepts an optional timezone, its content is not used when parsing the timestamp.
        '^(?:<%{NONNEGINT:[Attachment][RawLog][Content][log][syslog][priority]:int}>)?%{SYSLOGTIMESTAMP:[@metadata][timestamp]} (?:%{WORD}: )?(?:%{IP:[Attachment][RawLog][Content][host][ip]})?%{SYSLOGHOST:[Attachment][RawLog][Content][host][hostname]} (?:%{NONNEGINT}: )?%%{DATA:[Attachment][RawLog][Content][event][code]}: %{GREEDYDATA:[Attachment][RawLog][Content][message]}',
        '^(?:<%{NONNEGINT:[Attachment][RawLog][Content][log][syslog][priority]:int}>)?(?:%{NONNEGINT}: )?%{WORD}: %%{DATA:[Attachment][RawLog][Content][event][code]}: %{GREEDYDATA:[Attachment][RawLog][Content][message]}',

        # RFC 5424
        #   <pri>version timestamp hostname app-name procid msgid structured-data msg
        #   <pri>version timestamp hostname app-name procid msgid structured-data
        '^<%{NONNEGINT:[Attachment][RawLog][Content][log][syslog][priority]:int}>%{POSINT} (?:-|%{TIMESTAMP_ISO8601:[@metadata][timestamp]}) (?:-|%{HOSTNAME:[Attachment][RawLog][Content][host][hostname]}) %{NOTSPACE:[Attachment][RawLog][Content][process][name]} (?:-|%{NONNEGINT:[Attachment][RawLog][Content][process][pid]:int}) %{NOTSPACE:[Attachment][RawLog][Content][event][id]} (?:-|(?<SD>(?:\[(?:\\.|[!-\\\\^-~ ])+\])+))(?: %{GREEDYDATA:[Attachment][RawLog][Content][message]})?',

        # RFC 3164 (including CEF & LEEF) with several extensions
        #   <pri>timestamp hostname ip processname[pid]: message
        #   <pri>timestamp ip hostname processname[pid]: message
        #   <pri>timestamp iporhost processname[pid]: message
        #   <pri>timestamp iporhost: message
        #
        # The pattern allows the pri & pid fields to be omitted. It also accepts an optional ip field.
        # It accepts ISO 8601 dates/times and optional year/msecs fields for the RFC 3164 format.
        # It a single IP address or hostname is given, the processname & pid fields may be omitted entirely.
        '^(?:<%{NONNEGINT:[Attachment][RawLog][Content][log][syslog][priority]:int}>)?(?:%{SYSLOGTIMESTAMP:[@metadata][timestamp]}|%{TIMESTAMP_ISO8601:[@metadata][timestamp]}) %{HOSTNAME:[Attachment][RawLog][Content][host][hostname]} %{IP:[Attachment][RawLog][Content][host][ip]} %{PROG:[Attachment][RawLog][Content][process][name]}(?:\[%{POSINT:[Attachment][RawLog][Content][process][pid]:int}\])?: ?%{GREEDYDATA:[Attachment][RawLog][Content][message]}',
        '^(?:<%{NONNEGINT:[Attachment][RawLog][Content][log][syslog][priority]:int}>)?(?:%{SYSLOGTIMESTAMP:[@metadata][timestamp]}|%{TIMESTAMP_ISO8601:[@metadata][timestamp]}) %{IP:[Attachment][RawLog][Content][host][ip]} %{SYSLOGHOST:[Attachment][RawLog][Content][host][hostname]} %{PROG:[Attachment][RawLog][Content][process][name]}(?:\[%{POSINT:[Attachment][RawLog][Content][process][pid]:int}\])?: ?%{GREEDYDATA:[Attachment][RawLog][Content][message]}',
        '^(?:<%{NONNEGINT:[Attachment][RawLog][Content][log][syslog][priority]:int}>)?(?:%{SYSLOGTIMESTAMP:[@metadata][timestamp]}|%{TIMESTAMP_ISO8601:[@metadata][timestamp]}) (?:%{IP:[Attachment][RawLog][Content][host][ip]}|%{HOSTNAME:[Attachment][RawLog][Content][host][hostname]})(?: %{PROG:[Attachment][RawLog][Content][process][name]}(?:\[%{POSINT:[Attachment][RawLog][Content][process][pid]:int}\])?)?: ?%{GREEDYDATA:[Attachment][RawLog][Content][message]}'
      ]
    }
    pattern_definitions => {
        # Allow an optional "year" field, either before the RFC 3164 date/time or between the month's day & time parts.
        # Allow an optional "msec" field for sub-second time resolution.
        'SYSLOGTIMESTAMP' => '(?:(?:%{YEAR} )?%{MONTH} +%{MONTHDAY} %{TIME}(?:\.%{NONNEGINT})?|%{MONTH} +%{MONTHDAY} (?:%{YEAR} )?%{TIME)(?:\.%{NONNEGINT})?'
    }
    timeout_scope       => "event"
    ecs_compatibility   => "disabled"
  }
  
  mutate {
    add_field => {
      '[Attachment][RawLog][Content][host][ip]'        => '%{[@metadata][input][tcp][source][ip]}'
      '[Attachment][RawLog][Content][host][port]'        => '%{[@metadata][input][tcp][source][port]}'
      '[Attachment][RawLog][Content][@timestamp]'      => '%{@timestamp}'
      '[Attachment][RawLog][Content][event][original]' => '%{message}'
    }
  }
}

output {
  if "_grokparsefailure" in [tags] or "_groktimeout" in [tags] {
    kafka {
      bootstrap_servers => "${BOOTSTRAP_SERVER}"
      topic_id => "${TOPIC_COLLECTED}_ERR"
      codec => json
    }
  } else {
    kafka {
      bootstrap_servers => "${BOOTSTRAP_SERVER}"
      topic_id => "${TOPIC_COLLECTED}"
      codec => json
    }
  }
}
